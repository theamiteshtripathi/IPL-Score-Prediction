# -*- coding: utf-8 -*-
"""player_performance_analyzer.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_U0O9_FTrzvN4ijpH964sFgEPr2RGh4u
"""
def calculate_player_performance():
    # Let's reimport the necessary libraries and load the data
    import pandas as pd
    import numpy as np
    import matplotlib.pyplot as plt
    import seaborn as sns

    # Load the data
    df = pd.read_csv('ipl.csv')

    # Data Preprocessing
    # We'll keep all rows as every ball bowled is important for player performance analysis

    # Total runs scored by each batsman
    total_runs = df.groupby('batsman')['runs'].sum()

    # Total wickets taken by each bowler
    total_wickets = df.groupby('bowler')['wickets'].sum()

    # Total balls faced by each batsman
    # Assuming that a batsman faces one ball per row
    total_balls_faced = df['batsman'].value_counts()

    # Total overs bowled by each bowler
    # Assuming that a bowler bowls one ball per row
    total_balls_bowled = df['bowler'].value_counts()
    total_overs_bowled = total_balls_bowled / 6

    # Construct a DataFrame with these metrics
    player_performance = pd.DataFrame({
        'Total Runs': total_runs,
        'Total Wickets': total_wickets,
        'Total Balls Faced': total_balls_faced,
        'Total Overs Bowled': total_overs_bowled
    })

    # Compute derived metrics
    player_performance['Strike Rate'] = player_performance['Total Runs'] / player_performance['Total Balls Faced'] * 100
    player_performance['Bowling Average'] = player_performance['Total Wickets'] / player_performance['Total Overs Bowled']

    # Fill NaN values with 0
    player_performance.fillna(0, inplace=True)

    # Set up the matplotlib figure
    f, axes = plt.subplots(4, 1, figsize=(10, 20))

    # Top 10 Batsmen by Total Runs
    top_batsmen = player_performance['Total Runs'].nlargest(10)
    sns.barplot(x=top_batsmen, y=top_batsmen.index, ax=axes[0])
    axes[0].set_title('Top 10 Batsmen by Total Runs')

    # Top 10 Bowlers by Total Wickets
    top_bowlers = player_performance['Total Wickets'].nlargest(10)
    sns.barplot(x=top_bowlers, y=top_bowlers.index, ax=axes[1])
    axes[1].set_title('Top 10 Bowlers by Total Wickets')

    # Top 10 Batsmen by Strike Rate
    top_strike_rates = player_performance[player_performance['Total Balls Faced'] > 100]['Strike Rate'].nlargest(10)
    sns.barplot(x=top_strike_rates, y=top_strike_rates.index, ax=axes[2])
    axes[2].set_title('Top 10 Batsmen by Strike Rate (min. 100 balls faced)')

    # Top 10 Bowlers by Bowling Average
    top_bowling_averages = player_performance[player_performance['Total Overs Bowled'] > 10]['Bowling Average'].nsmallest(10)
    sns.barplot(x=top_bowling_averages, y=top_bowling_averages.index, ax=axes[3])
    axes[3].set_title('Top 10 Bowlers by Bowling Average (min. 10 overs bowled)')

    plt.tight_layout()
    return plt.show()

if __name__ == "__main__":
    calculate_player_performance()